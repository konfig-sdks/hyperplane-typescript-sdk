/* tslint:disable */
/* eslint-disable */
/*
Hyperplane API Gateway

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiErrResponse } from '../models';
// @ts-ignore
import { ModelsClientResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ClientApi - axios parameter creator
 * @export
 */
export const ClientApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch a client by its access key ID
         * @summary Get Client
         * @param {string} accessKeyId Access Key ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByAccessKey: async (accessKeyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessKeyId' is not null or undefined
            assertParamExists('getByAccessKey', 'accessKeyId', accessKeyId)
            const localVarPath = `/client/{access_key_id}`
                .replace(`{${"access_key_id"}}`, encodeURIComponent(String(accessKeyId !== undefined ? accessKeyId : `-access_key_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PASETO required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "pASETO", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/client/{access_key_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientApi - functional programming interface
 * @export
 */
export const ClientApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetch a client by its access key ID
         * @summary Get Client
         * @param {ClientApiGetByAccessKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByAccessKey(requestParameters: ClientApiGetByAccessKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByAccessKey(requestParameters.accessKeyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClientApi - factory interface
 * @export
 */
export const ClientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientApiFp(configuration)
    return {
        /**
         * Fetch a client by its access key ID
         * @summary Get Client
         * @param {ClientApiGetByAccessKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByAccessKey(requestParameters: ClientApiGetByAccessKeyRequest, options?: AxiosRequestConfig): AxiosPromise<ModelsClientResponse> {
            return localVarFp.getByAccessKey(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getByAccessKey operation in ClientApi.
 * @export
 * @interface ClientApiGetByAccessKeyRequest
 */
export type ClientApiGetByAccessKeyRequest = {
    
    /**
    * Access Key ID
    * @type {string}
    * @memberof ClientApiGetByAccessKey
    */
    readonly accessKeyId: string
    
}

/**
 * ClientApiGenerated - object-oriented interface
 * @export
 * @class ClientApiGenerated
 * @extends {BaseAPI}
 */
export class ClientApiGenerated extends BaseAPI {
    /**
     * Fetch a client by its access key ID
     * @summary Get Client
     * @param {ClientApiGetByAccessKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApiGenerated
     */
    public getByAccessKey(requestParameters: ClientApiGetByAccessKeyRequest, options?: AxiosRequestConfig) {
        return ClientApiFp(this.configuration).getByAccessKey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
