/* tslint:disable */
/* eslint-disable */
/*
Hyperplane API Gateway

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ModelsAccountCashflowOverview } from '../models';
// @ts-ignore
import { ModelsTransactionEnrichmentStatisticsResponse } from '../models';
// @ts-ignore
import { ModelsTransactionEnrichmentUsersResponse } from '../models';
// @ts-ignore
import { ModelsUserCashflowHistoryResponse } from '../models';
// @ts-ignore
import { ModelsUserCashflowPerCategoryResponse } from '../models';
// @ts-ignore
import { ModelsUserTransactionsResponse } from '../models';
// @ts-ignore
import { ModelsUserTransactionsStatisticsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EnrichedTransactionsApi - axios parameter creator
 * @export
 */
export const EnrichedTransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the enriched transaction history of a user
         * @summary Get the transaction history for a given user.
         * @param {string} userId User ID
         * @param {string} moduleId Module ID
         * @param {number} [pageNumber] Page number, starting at 1
         * @param {number} [pageSize] Number of elements per page
         * @param {string} [startDate] Minimum transaction date to be included (e.g. \&#39;2020-09-18 10:00:00\&#39;).
         * @param {string} [endDate] Maximum transaction date to be included (e.g. \&#39;2020-09-18 10:00:00\&#39;).
         * @param {string} [flowType] The flow type from transactions to be returned, must be either \&#39;inflow\&#39;, or \&#39;outflow\&#39;. Defaults to returning both.
         * @param {number} [minAmount] The minimum amount from transactions to be returned.
         * @param {number} [maxAmount] The maximum amount from transactions to be returned.
         * @param {string} [accountType] Specifies if we must include only an specific account type.
         * @param {Array<string>} [categories] List of categories to filter. Accept only category codes present on our taxonomy.
         * @param {string} [searchName] Search for a specific string in the transaction description.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistory: async (userId: string, moduleId: string, pageNumber?: number, pageSize?: number, startDate?: string, endDate?: string, flowType?: string, minAmount?: number, maxAmount?: number, accountType?: string, categories?: Array<string>, searchName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getHistory', 'userId', userId)
            // verify required parameter 'moduleId' is not null or undefined
            assertParamExists('getHistory', 'moduleId', moduleId)
            const localVarPath = `/user/{user_id}/transactions`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PASETO required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "pASETO", configuration })
            if (pageNumber !== undefined) {
                localVarQueryParameter['page_number'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (flowType !== undefined) {
                localVarQueryParameter['flow_type'] = flowType;
            }

            if (minAmount !== undefined) {
                localVarQueryParameter['min_amount'] = minAmount;
            }

            if (maxAmount !== undefined) {
                localVarQueryParameter['max_amount'] = maxAmount;
            }

            if (accountType !== undefined) {
                localVarQueryParameter['account_type'] = accountType;
            }

            if (categories) {
                localVarQueryParameter['categories'] = categories.join(COLLECTION_FORMATS.csv);
            }

            if (searchName !== undefined) {
                localVarQueryParameter['search_name'] = searchName;
            }

            if (moduleId != null) {
                localVarHeaderParameter['module-id'] = String(moduleId);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/user/{user_id}/transactions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves statistics about a transaction enrichment module. The payload includes the number of distinct users and number of transactions.
         * @summary Get statistics for transaction enrichment module.
         * @param {string} moduleId Module ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatistics: async (moduleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'moduleId' is not null or undefined
            assertParamExists('getStatistics', 'moduleId', moduleId)
            const localVarPath = `/module/transaction-enrichment/statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PASETO required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "pASETO", configuration })
            if (moduleId != null) {
                localVarHeaderParameter['module-id'] = String(moduleId);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/module/transaction-enrichment/statistics',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Detailed percentages of inflow and outflow for each category. Lists all the top level categories and the discrimination under each top level category
         * @summary Get a user\'s cashflow aggregated per category.
         * @param {string} userId User ID
         * @param {string} moduleId Module ID
         * @param {string} [startDate] Minimum transaction date to be included (e.g. \&#39;2020-09-18 10:00:00\&#39;).
         * @param {string} [endDate] Maximum transaction date to be included (e.g. \&#39;2020-09-18 10:00:00\&#39;).
         * @param {string} [accountType] Specifies if we must include only an specific account type. Can be \&#39;CREDIT_CARD\&#39;, \&#39;DEBIT_CARD\&#39;, \&#39;SAVINGS\&#39;, \&#39;CHECKING\&#39;, \&#39;INVESTMENT\&#39;, \&#39;PENSION\&#39;, or \&#39;LOAN\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCashflowCategories: async (userId: string, moduleId: string, startDate?: string, endDate?: string, accountType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserCashflowCategories', 'userId', userId)
            // verify required parameter 'moduleId' is not null or undefined
            assertParamExists('getUserCashflowCategories', 'moduleId', moduleId)
            const localVarPath = `/user/{user_id}/cashflow/categories`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PASETO required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "pASETO", configuration })
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (accountType !== undefined) {
                localVarQueryParameter['account_type'] = accountType;
            }

            if (moduleId != null) {
                localVarHeaderParameter['module-id'] = String(moduleId);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/user/{user_id}/cashflow/categories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a cashflow timeline for a given user, aggregating all transactions in a given window. The period windows can be of 1 hour, day, week, month or year.
         * @summary Get the cashflow history for a given user.
         * @param {string} userId User ID
         * @param {string} moduleId Module ID
         * @param {string} [startDate] Minimum transaction date to be included (e.g. \&#39;2020-09-18 10:00:00\&#39;).
         * @param {string} [endDate] Maximum transaction date to be included (e.g. \&#39;2020-09-18 10:00:00\&#39;).
         * @param {string} [aggregation] How to aggregate the cashflows in periods. Can be \&#39;HOUR\&#39;, \&#39;DAY\&#39;, \&#39;WEEK\&#39;, \&#39;MONTH\&#39;, or \&#39;YEAR\&#39;.
         * @param {string} [accountType] Specifies if we must include only an specific account type. Can be \&#39;CREDIT_CARD\&#39;, \&#39;DEBIT_CARD\&#39;, \&#39;SAVINGS\&#39;, \&#39;CHECKING\&#39;, \&#39;INVESTMENT\&#39;, \&#39;PENSION\&#39;, or \&#39;LOAN\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCashflowHistory: async (userId: string, moduleId: string, startDate?: string, endDate?: string, aggregation?: string, accountType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserCashflowHistory', 'userId', userId)
            // verify required parameter 'moduleId' is not null or undefined
            assertParamExists('getUserCashflowHistory', 'moduleId', moduleId)
            const localVarPath = `/user/{user_id}/cashflow/history`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PASETO required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "pASETO", configuration })
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (aggregation !== undefined) {
                localVarQueryParameter['aggregation'] = aggregation;
            }

            if (accountType !== undefined) {
                localVarQueryParameter['account_type'] = accountType;
            }

            if (moduleId != null) {
                localVarHeaderParameter['module-id'] = String(moduleId);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/user/{user_id}/cashflow/history',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the cashflow statistics for a given user per account type. That includes inflow, outflow, and net cashflow for each account type.
         * @summary Get the cashflow statistics for a given user.
         * @param {string} userId User ID
         * @param {string} moduleId Module ID
         * @param {string} [startDate] Minimum transaction date to be included (e.g. \&#39;2020-09-18 10:00:00\&#39;).
         * @param {string} [endDate] Maximum transaction date to be included (e.g. \&#39;2020-09-18 10:00:00\&#39;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCashflowStatistics: async (userId: string, moduleId: string, startDate?: string, endDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserCashflowStatistics', 'userId', userId)
            // verify required parameter 'moduleId' is not null or undefined
            assertParamExists('getUserCashflowStatistics', 'moduleId', moduleId)
            const localVarPath = `/user/{user_id}/cashflow/statistics`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PASETO required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "pASETO", configuration })
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (moduleId != null) {
                localVarHeaderParameter['module-id'] = String(moduleId);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/user/{user_id}/cashflow/statistics',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the number of transactions, average transaction value and median.
         * @summary Get the transaction statistics for a given user.
         * @param {string} userId User ID
         * @param {string} moduleId Module ID
         * @param {string} [startDate] Minimum transaction date to be included (e.g. \&#39;2020-09-18 10:00:00\&#39;).
         * @param {string} [endDate] Maximum transaction date to be included (e.g. \&#39;2020-09-18 10:00:00\&#39;).
         * @param {string} [flowType] The flow type from transactions to be returned, must be either \&#39;inflow\&#39;, or \&#39;outflow\&#39;. Defaults to returning both.
         * @param {number} [minAmount] The minimum amount from transactions to be returned.
         * @param {number} [maxAmount] The maximum amount from transactions to be returned.
         * @param {string} [accountType] Specifies if we must include only an specific account type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserStatistics: async (userId: string, moduleId: string, startDate?: string, endDate?: string, flowType?: string, minAmount?: number, maxAmount?: number, accountType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserStatistics', 'userId', userId)
            // verify required parameter 'moduleId' is not null or undefined
            assertParamExists('getUserStatistics', 'moduleId', moduleId)
            const localVarPath = `/user/{user_id}/transactions/statistics`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PASETO required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "pASETO", configuration })
            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (flowType !== undefined) {
                localVarQueryParameter['flow_type'] = flowType;
            }

            if (minAmount !== undefined) {
                localVarQueryParameter['min_amount'] = minAmount;
            }

            if (maxAmount !== undefined) {
                localVarQueryParameter['max_amount'] = maxAmount;
            }

            if (accountType !== undefined) {
                localVarQueryParameter['account_type'] = accountType;
            }

            if (moduleId != null) {
                localVarHeaderParameter['module-id'] = String(moduleId);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/user/{user_id}/transactions/statistics',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the users in a transaction enrichment module. Optionally, you can pass a `user_id_prefix` as a query parameter to filter users by a user ID prefix. Every user will contain their user ID, as well as their first and last transaction dates.
         * @summary List the users in a transaction enrichment module.
         * @param {string} moduleId Module ID
         * @param {string} [userIdPrefix] Prefix used to filter user_id results (e.g.: prefix &#x3D; \&#39;2\&#39;-&gt; users &#x3D; [\&#39;23456\&#39;, \&#39;24562\&#39;]).
         * @param {number} [pageNumber] Page number, starting at 1
         * @param {number} [pageSize] Number of elements per page. Defaults to 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (moduleId: string, userIdPrefix?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'moduleId' is not null or undefined
            assertParamExists('listUsers', 'moduleId', moduleId)
            const localVarPath = `/module/transaction-enrichment/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PASETO required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "pASETO", configuration })
            if (userIdPrefix !== undefined) {
                localVarQueryParameter['user_id_prefix'] = userIdPrefix;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page_number'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (moduleId != null) {
                localVarHeaderParameter['module-id'] = String(moduleId);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/module/transaction-enrichment/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnrichedTransactionsApi - functional programming interface
 * @export
 */
export const EnrichedTransactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnrichedTransactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the enriched transaction history of a user
         * @summary Get the transaction history for a given user.
         * @param {EnrichedTransactionsApiGetHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistory(requestParameters: EnrichedTransactionsApiGetHistoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUserTransactionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistory(requestParameters.userId, requestParameters.moduleId, requestParameters.pageNumber, requestParameters.pageSize, requestParameters.startDate, requestParameters.endDate, requestParameters.flowType, requestParameters.minAmount, requestParameters.maxAmount, requestParameters.accountType, requestParameters.categories, requestParameters.searchName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves statistics about a transaction enrichment module. The payload includes the number of distinct users and number of transactions.
         * @summary Get statistics for transaction enrichment module.
         * @param {EnrichedTransactionsApiGetStatisticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatistics(requestParameters: EnrichedTransactionsApiGetStatisticsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsTransactionEnrichmentStatisticsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatistics(requestParameters.moduleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Detailed percentages of inflow and outflow for each category. Lists all the top level categories and the discrimination under each top level category
         * @summary Get a user\'s cashflow aggregated per category.
         * @param {EnrichedTransactionsApiGetUserCashflowCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCashflowCategories(requestParameters: EnrichedTransactionsApiGetUserCashflowCategoriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUserCashflowPerCategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserCashflowCategories(requestParameters.userId, requestParameters.moduleId, requestParameters.startDate, requestParameters.endDate, requestParameters.accountType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a cashflow timeline for a given user, aggregating all transactions in a given window. The period windows can be of 1 hour, day, week, month or year.
         * @summary Get the cashflow history for a given user.
         * @param {EnrichedTransactionsApiGetUserCashflowHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCashflowHistory(requestParameters: EnrichedTransactionsApiGetUserCashflowHistoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUserCashflowHistoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserCashflowHistory(requestParameters.userId, requestParameters.moduleId, requestParameters.startDate, requestParameters.endDate, requestParameters.aggregation, requestParameters.accountType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the cashflow statistics for a given user per account type. That includes inflow, outflow, and net cashflow for each account type.
         * @summary Get the cashflow statistics for a given user.
         * @param {EnrichedTransactionsApiGetUserCashflowStatisticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCashflowStatistics(requestParameters: EnrichedTransactionsApiGetUserCashflowStatisticsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsAccountCashflowOverview>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserCashflowStatistics(requestParameters.userId, requestParameters.moduleId, requestParameters.startDate, requestParameters.endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the number of transactions, average transaction value and median.
         * @summary Get the transaction statistics for a given user.
         * @param {EnrichedTransactionsApiGetUserStatisticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserStatistics(requestParameters: EnrichedTransactionsApiGetUserStatisticsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUserTransactionsStatisticsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserStatistics(requestParameters.userId, requestParameters.moduleId, requestParameters.startDate, requestParameters.endDate, requestParameters.flowType, requestParameters.minAmount, requestParameters.maxAmount, requestParameters.accountType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the users in a transaction enrichment module. Optionally, you can pass a `user_id_prefix` as a query parameter to filter users by a user ID prefix. Every user will contain their user ID, as well as their first and last transaction dates.
         * @summary List the users in a transaction enrichment module.
         * @param {EnrichedTransactionsApiListUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(requestParameters: EnrichedTransactionsApiListUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsTransactionEnrichmentUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(requestParameters.moduleId, requestParameters.userIdPrefix, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EnrichedTransactionsApi - factory interface
 * @export
 */
export const EnrichedTransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnrichedTransactionsApiFp(configuration)
    return {
        /**
         * Returns the enriched transaction history of a user
         * @summary Get the transaction history for a given user.
         * @param {EnrichedTransactionsApiGetHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistory(requestParameters: EnrichedTransactionsApiGetHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<ModelsUserTransactionsResponse> {
            return localVarFp.getHistory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves statistics about a transaction enrichment module. The payload includes the number of distinct users and number of transactions.
         * @summary Get statistics for transaction enrichment module.
         * @param {EnrichedTransactionsApiGetStatisticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatistics(requestParameters: EnrichedTransactionsApiGetStatisticsRequest, options?: AxiosRequestConfig): AxiosPromise<ModelsTransactionEnrichmentStatisticsResponse> {
            return localVarFp.getStatistics(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Detailed percentages of inflow and outflow for each category. Lists all the top level categories and the discrimination under each top level category
         * @summary Get a user\'s cashflow aggregated per category.
         * @param {EnrichedTransactionsApiGetUserCashflowCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCashflowCategories(requestParameters: EnrichedTransactionsApiGetUserCashflowCategoriesRequest, options?: AxiosRequestConfig): AxiosPromise<ModelsUserCashflowPerCategoryResponse> {
            return localVarFp.getUserCashflowCategories(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a cashflow timeline for a given user, aggregating all transactions in a given window. The period windows can be of 1 hour, day, week, month or year.
         * @summary Get the cashflow history for a given user.
         * @param {EnrichedTransactionsApiGetUserCashflowHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCashflowHistory(requestParameters: EnrichedTransactionsApiGetUserCashflowHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<ModelsUserCashflowHistoryResponse> {
            return localVarFp.getUserCashflowHistory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the cashflow statistics for a given user per account type. That includes inflow, outflow, and net cashflow for each account type.
         * @summary Get the cashflow statistics for a given user.
         * @param {EnrichedTransactionsApiGetUserCashflowStatisticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCashflowStatistics(requestParameters: EnrichedTransactionsApiGetUserCashflowStatisticsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ModelsAccountCashflowOverview>> {
            return localVarFp.getUserCashflowStatistics(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the number of transactions, average transaction value and median.
         * @summary Get the transaction statistics for a given user.
         * @param {EnrichedTransactionsApiGetUserStatisticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserStatistics(requestParameters: EnrichedTransactionsApiGetUserStatisticsRequest, options?: AxiosRequestConfig): AxiosPromise<ModelsUserTransactionsStatisticsResponse> {
            return localVarFp.getUserStatistics(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the users in a transaction enrichment module. Optionally, you can pass a `user_id_prefix` as a query parameter to filter users by a user ID prefix. Every user will contain their user ID, as well as their first and last transaction dates.
         * @summary List the users in a transaction enrichment module.
         * @param {EnrichedTransactionsApiListUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(requestParameters: EnrichedTransactionsApiListUsersRequest, options?: AxiosRequestConfig): AxiosPromise<ModelsTransactionEnrichmentUsersResponse> {
            return localVarFp.listUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getHistory operation in EnrichedTransactionsApi.
 * @export
 * @interface EnrichedTransactionsApiGetHistoryRequest
 */
export type EnrichedTransactionsApiGetHistoryRequest = {
    
    /**
    * User ID
    * @type {string}
    * @memberof EnrichedTransactionsApiGetHistory
    */
    readonly userId: string
    
    /**
    * Module ID
    * @type {string}
    * @memberof EnrichedTransactionsApiGetHistory
    */
    readonly moduleId: string
    
    /**
    * Page number, starting at 1
    * @type {number}
    * @memberof EnrichedTransactionsApiGetHistory
    */
    readonly pageNumber?: number
    
    /**
    * Number of elements per page
    * @type {number}
    * @memberof EnrichedTransactionsApiGetHistory
    */
    readonly pageSize?: number
    
    /**
    * Minimum transaction date to be included (e.g. \'2020-09-18 10:00:00\').
    * @type {string}
    * @memberof EnrichedTransactionsApiGetHistory
    */
    readonly startDate?: string
    
    /**
    * Maximum transaction date to be included (e.g. \'2020-09-18 10:00:00\').
    * @type {string}
    * @memberof EnrichedTransactionsApiGetHistory
    */
    readonly endDate?: string
    
    /**
    * The flow type from transactions to be returned, must be either \'inflow\', or \'outflow\'. Defaults to returning both.
    * @type {string}
    * @memberof EnrichedTransactionsApiGetHistory
    */
    readonly flowType?: string
    
    /**
    * The minimum amount from transactions to be returned.
    * @type {number}
    * @memberof EnrichedTransactionsApiGetHistory
    */
    readonly minAmount?: number
    
    /**
    * The maximum amount from transactions to be returned.
    * @type {number}
    * @memberof EnrichedTransactionsApiGetHistory
    */
    readonly maxAmount?: number
    
    /**
    * Specifies if we must include only an specific account type.
    * @type {string}
    * @memberof EnrichedTransactionsApiGetHistory
    */
    readonly accountType?: string
    
    /**
    * List of categories to filter. Accept only category codes present on our taxonomy.
    * @type {Array<string>}
    * @memberof EnrichedTransactionsApiGetHistory
    */
    readonly categories?: Array<string>
    
    /**
    * Search for a specific string in the transaction description.
    * @type {string}
    * @memberof EnrichedTransactionsApiGetHistory
    */
    readonly searchName?: string
    
}

/**
 * Request parameters for getStatistics operation in EnrichedTransactionsApi.
 * @export
 * @interface EnrichedTransactionsApiGetStatisticsRequest
 */
export type EnrichedTransactionsApiGetStatisticsRequest = {
    
    /**
    * Module ID
    * @type {string}
    * @memberof EnrichedTransactionsApiGetStatistics
    */
    readonly moduleId: string
    
}

/**
 * Request parameters for getUserCashflowCategories operation in EnrichedTransactionsApi.
 * @export
 * @interface EnrichedTransactionsApiGetUserCashflowCategoriesRequest
 */
export type EnrichedTransactionsApiGetUserCashflowCategoriesRequest = {
    
    /**
    * User ID
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserCashflowCategories
    */
    readonly userId: string
    
    /**
    * Module ID
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserCashflowCategories
    */
    readonly moduleId: string
    
    /**
    * Minimum transaction date to be included (e.g. \'2020-09-18 10:00:00\').
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserCashflowCategories
    */
    readonly startDate?: string
    
    /**
    * Maximum transaction date to be included (e.g. \'2020-09-18 10:00:00\').
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserCashflowCategories
    */
    readonly endDate?: string
    
    /**
    * Specifies if we must include only an specific account type. Can be \'CREDIT_CARD\', \'DEBIT_CARD\', \'SAVINGS\', \'CHECKING\', \'INVESTMENT\', \'PENSION\', or \'LOAN\'.
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserCashflowCategories
    */
    readonly accountType?: string
    
}

/**
 * Request parameters for getUserCashflowHistory operation in EnrichedTransactionsApi.
 * @export
 * @interface EnrichedTransactionsApiGetUserCashflowHistoryRequest
 */
export type EnrichedTransactionsApiGetUserCashflowHistoryRequest = {
    
    /**
    * User ID
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserCashflowHistory
    */
    readonly userId: string
    
    /**
    * Module ID
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserCashflowHistory
    */
    readonly moduleId: string
    
    /**
    * Minimum transaction date to be included (e.g. \'2020-09-18 10:00:00\').
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserCashflowHistory
    */
    readonly startDate?: string
    
    /**
    * Maximum transaction date to be included (e.g. \'2020-09-18 10:00:00\').
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserCashflowHistory
    */
    readonly endDate?: string
    
    /**
    * How to aggregate the cashflows in periods. Can be \'HOUR\', \'DAY\', \'WEEK\', \'MONTH\', or \'YEAR\'.
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserCashflowHistory
    */
    readonly aggregation?: string
    
    /**
    * Specifies if we must include only an specific account type. Can be \'CREDIT_CARD\', \'DEBIT_CARD\', \'SAVINGS\', \'CHECKING\', \'INVESTMENT\', \'PENSION\', or \'LOAN\'.
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserCashflowHistory
    */
    readonly accountType?: string
    
}

/**
 * Request parameters for getUserCashflowStatistics operation in EnrichedTransactionsApi.
 * @export
 * @interface EnrichedTransactionsApiGetUserCashflowStatisticsRequest
 */
export type EnrichedTransactionsApiGetUserCashflowStatisticsRequest = {
    
    /**
    * User ID
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserCashflowStatistics
    */
    readonly userId: string
    
    /**
    * Module ID
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserCashflowStatistics
    */
    readonly moduleId: string
    
    /**
    * Minimum transaction date to be included (e.g. \'2020-09-18 10:00:00\').
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserCashflowStatistics
    */
    readonly startDate?: string
    
    /**
    * Maximum transaction date to be included (e.g. \'2020-09-18 10:00:00\').
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserCashflowStatistics
    */
    readonly endDate?: string
    
}

/**
 * Request parameters for getUserStatistics operation in EnrichedTransactionsApi.
 * @export
 * @interface EnrichedTransactionsApiGetUserStatisticsRequest
 */
export type EnrichedTransactionsApiGetUserStatisticsRequest = {
    
    /**
    * User ID
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserStatistics
    */
    readonly userId: string
    
    /**
    * Module ID
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserStatistics
    */
    readonly moduleId: string
    
    /**
    * Minimum transaction date to be included (e.g. \'2020-09-18 10:00:00\').
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserStatistics
    */
    readonly startDate?: string
    
    /**
    * Maximum transaction date to be included (e.g. \'2020-09-18 10:00:00\').
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserStatistics
    */
    readonly endDate?: string
    
    /**
    * The flow type from transactions to be returned, must be either \'inflow\', or \'outflow\'. Defaults to returning both.
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserStatistics
    */
    readonly flowType?: string
    
    /**
    * The minimum amount from transactions to be returned.
    * @type {number}
    * @memberof EnrichedTransactionsApiGetUserStatistics
    */
    readonly minAmount?: number
    
    /**
    * The maximum amount from transactions to be returned.
    * @type {number}
    * @memberof EnrichedTransactionsApiGetUserStatistics
    */
    readonly maxAmount?: number
    
    /**
    * Specifies if we must include only an specific account type.
    * @type {string}
    * @memberof EnrichedTransactionsApiGetUserStatistics
    */
    readonly accountType?: string
    
}

/**
 * Request parameters for listUsers operation in EnrichedTransactionsApi.
 * @export
 * @interface EnrichedTransactionsApiListUsersRequest
 */
export type EnrichedTransactionsApiListUsersRequest = {
    
    /**
    * Module ID
    * @type {string}
    * @memberof EnrichedTransactionsApiListUsers
    */
    readonly moduleId: string
    
    /**
    * Prefix used to filter user_id results (e.g.: prefix = \'2\'-> users = [\'23456\', \'24562\']).
    * @type {string}
    * @memberof EnrichedTransactionsApiListUsers
    */
    readonly userIdPrefix?: string
    
    /**
    * Page number, starting at 1
    * @type {number}
    * @memberof EnrichedTransactionsApiListUsers
    */
    readonly pageNumber?: number
    
    /**
    * Number of elements per page. Defaults to 100
    * @type {number}
    * @memberof EnrichedTransactionsApiListUsers
    */
    readonly pageSize?: number
    
}

/**
 * EnrichedTransactionsApiGenerated - object-oriented interface
 * @export
 * @class EnrichedTransactionsApiGenerated
 * @extends {BaseAPI}
 */
export class EnrichedTransactionsApiGenerated extends BaseAPI {
    /**
     * Returns the enriched transaction history of a user
     * @summary Get the transaction history for a given user.
     * @param {EnrichedTransactionsApiGetHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrichedTransactionsApiGenerated
     */
    public getHistory(requestParameters: EnrichedTransactionsApiGetHistoryRequest, options?: AxiosRequestConfig) {
        return EnrichedTransactionsApiFp(this.configuration).getHistory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves statistics about a transaction enrichment module. The payload includes the number of distinct users and number of transactions.
     * @summary Get statistics for transaction enrichment module.
     * @param {EnrichedTransactionsApiGetStatisticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrichedTransactionsApiGenerated
     */
    public getStatistics(requestParameters: EnrichedTransactionsApiGetStatisticsRequest, options?: AxiosRequestConfig) {
        return EnrichedTransactionsApiFp(this.configuration).getStatistics(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Detailed percentages of inflow and outflow for each category. Lists all the top level categories and the discrimination under each top level category
     * @summary Get a user\'s cashflow aggregated per category.
     * @param {EnrichedTransactionsApiGetUserCashflowCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrichedTransactionsApiGenerated
     */
    public getUserCashflowCategories(requestParameters: EnrichedTransactionsApiGetUserCashflowCategoriesRequest, options?: AxiosRequestConfig) {
        return EnrichedTransactionsApiFp(this.configuration).getUserCashflowCategories(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a cashflow timeline for a given user, aggregating all transactions in a given window. The period windows can be of 1 hour, day, week, month or year.
     * @summary Get the cashflow history for a given user.
     * @param {EnrichedTransactionsApiGetUserCashflowHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrichedTransactionsApiGenerated
     */
    public getUserCashflowHistory(requestParameters: EnrichedTransactionsApiGetUserCashflowHistoryRequest, options?: AxiosRequestConfig) {
        return EnrichedTransactionsApiFp(this.configuration).getUserCashflowHistory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the cashflow statistics for a given user per account type. That includes inflow, outflow, and net cashflow for each account type.
     * @summary Get the cashflow statistics for a given user.
     * @param {EnrichedTransactionsApiGetUserCashflowStatisticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrichedTransactionsApiGenerated
     */
    public getUserCashflowStatistics(requestParameters: EnrichedTransactionsApiGetUserCashflowStatisticsRequest, options?: AxiosRequestConfig) {
        return EnrichedTransactionsApiFp(this.configuration).getUserCashflowStatistics(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the number of transactions, average transaction value and median.
     * @summary Get the transaction statistics for a given user.
     * @param {EnrichedTransactionsApiGetUserStatisticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrichedTransactionsApiGenerated
     */
    public getUserStatistics(requestParameters: EnrichedTransactionsApiGetUserStatisticsRequest, options?: AxiosRequestConfig) {
        return EnrichedTransactionsApiFp(this.configuration).getUserStatistics(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the users in a transaction enrichment module. Optionally, you can pass a `user_id_prefix` as a query parameter to filter users by a user ID prefix. Every user will contain their user ID, as well as their first and last transaction dates.
     * @summary List the users in a transaction enrichment module.
     * @param {EnrichedTransactionsApiListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrichedTransactionsApiGenerated
     */
    public listUsers(requestParameters: EnrichedTransactionsApiListUsersRequest, options?: AxiosRequestConfig) {
        return EnrichedTransactionsApiFp(this.configuration).listUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
