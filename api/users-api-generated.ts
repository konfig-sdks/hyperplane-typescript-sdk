/* tslint:disable */
/* eslint-disable */
/*
Hyperplane API Gateway

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiErrResponse } from '../models';
// @ts-ignore
import { ModelsBatchUserPersonasRequest } from '../models';
// @ts-ignore
import { ModelsUserPersonasResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns all personas associated with a user.
         * @summary Get all the facet attributes for a list of users.
         * @param {ModelsBatchUserPersonasRequest} modelsBatchUserPersonasRequest List of user IDs
         * @param {string} [moduleId] Module ID
         * @param {string} [month] Reference month for persona scores in &#x60;YYYY-MM&#x60; format.
         * @param {number} [personaScoreThreshold] Minimum user persona score threshold to be included in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFacetAttributes: async (modelsBatchUserPersonasRequest: ModelsBatchUserPersonasRequest, moduleId?: string, month?: string, personaScoreThreshold?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelsBatchUserPersonasRequest' is not null or undefined
            assertParamExists('getAllFacetAttributes', 'modelsBatchUserPersonasRequest', modelsBatchUserPersonasRequest)
            const localVarPath = `/batch/user/personas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PASETO required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "pASETO", configuration })
            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (personaScoreThreshold !== undefined) {
                localVarQueryParameter['persona_score_threshold'] = personaScoreThreshold;
            }

            if (moduleId != null) {
                localVarHeaderParameter['module-id'] = String(moduleId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: modelsBatchUserPersonasRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/batch/user/personas',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(modelsBatchUserPersonasRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of personas and their scores for a given user. Personas are sorted by their persona score, in descending order.  You can also specify the minimum persona score threshold that a user must meet to be included in the response. Defaults to hyperplane\'s suggested threshold to determine if the user belongs to the persona.
         * @summary List personas associated with a user.
         * @param {string} userId User ID
         * @param {string} [moduleId] Module ID
         * @param {string} [month] Reference month for persona scores in &#x60;YYYY-MM&#x60; format.
         * @param {number} [personaScoreThreshold] Minimum user persona score threshold to be included in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserPersonas: async (userId: string, moduleId?: string, month?: string, personaScoreThreshold?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserPersonas', 'userId', userId)
            const localVarPath = `/users/{user_id}/personas`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PASETO required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "pASETO", configuration })
            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (personaScoreThreshold !== undefined) {
                localVarQueryParameter['persona_score_threshold'] = personaScoreThreshold;
            }

            if (moduleId != null) {
                localVarHeaderParameter['module-id'] = String(moduleId);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_id}/personas',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns all personas associated with a user.
         * @summary Get all the facet attributes for a list of users.
         * @param {UsersApiGetAllFacetAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllFacetAttributes(requestParameters: UsersApiGetAllFacetAttributesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsUserPersonasResponse>>> {
            const modelsBatchUserPersonasRequest: ModelsBatchUserPersonasRequest = {
                user_ids: requestParameters.user_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllFacetAttributes(modelsBatchUserPersonasRequest, requestParameters.moduleId, requestParameters.month, requestParameters.personaScoreThreshold, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of personas and their scores for a given user. Personas are sorted by their persona score, in descending order.  You can also specify the minimum persona score threshold that a user must meet to be included in the response. Defaults to hyperplane\'s suggested threshold to determine if the user belongs to the persona.
         * @summary List personas associated with a user.
         * @param {UsersApiListUserPersonasRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserPersonas(requestParameters: UsersApiListUserPersonasRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUserPersonasResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserPersonas(requestParameters.userId, requestParameters.moduleId, requestParameters.month, requestParameters.personaScoreThreshold, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Returns all personas associated with a user.
         * @summary Get all the facet attributes for a list of users.
         * @param {UsersApiGetAllFacetAttributesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFacetAttributes(requestParameters: UsersApiGetAllFacetAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ModelsUserPersonasResponse>> {
            return localVarFp.getAllFacetAttributes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of personas and their scores for a given user. Personas are sorted by their persona score, in descending order.  You can also specify the minimum persona score threshold that a user must meet to be included in the response. Defaults to hyperplane\'s suggested threshold to determine if the user belongs to the persona.
         * @summary List personas associated with a user.
         * @param {UsersApiListUserPersonasRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserPersonas(requestParameters: UsersApiListUserPersonasRequest, options?: AxiosRequestConfig): AxiosPromise<ModelsUserPersonasResponse> {
            return localVarFp.listUserPersonas(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllFacetAttributes operation in UsersApi.
 * @export
 * @interface UsersApiGetAllFacetAttributesRequest
 */
export type UsersApiGetAllFacetAttributesRequest = {
    
    /**
    * Module ID
    * @type {string}
    * @memberof UsersApiGetAllFacetAttributes
    */
    readonly moduleId?: string
    
    /**
    * Reference month for persona scores in `YYYY-MM` format.
    * @type {string}
    * @memberof UsersApiGetAllFacetAttributes
    */
    readonly month?: string
    
    /**
    * Minimum user persona score threshold to be included in the response.
    * @type {number}
    * @memberof UsersApiGetAllFacetAttributes
    */
    readonly personaScoreThreshold?: number
    
} & ModelsBatchUserPersonasRequest

/**
 * Request parameters for listUserPersonas operation in UsersApi.
 * @export
 * @interface UsersApiListUserPersonasRequest
 */
export type UsersApiListUserPersonasRequest = {
    
    /**
    * User ID
    * @type {string}
    * @memberof UsersApiListUserPersonas
    */
    readonly userId: string
    
    /**
    * Module ID
    * @type {string}
    * @memberof UsersApiListUserPersonas
    */
    readonly moduleId?: string
    
    /**
    * Reference month for persona scores in `YYYY-MM` format.
    * @type {string}
    * @memberof UsersApiListUserPersonas
    */
    readonly month?: string
    
    /**
    * Minimum user persona score threshold to be included in the response.
    * @type {number}
    * @memberof UsersApiListUserPersonas
    */
    readonly personaScoreThreshold?: number
    
}

/**
 * UsersApiGenerated - object-oriented interface
 * @export
 * @class UsersApiGenerated
 * @extends {BaseAPI}
 */
export class UsersApiGenerated extends BaseAPI {
    /**
     * Returns all personas associated with a user.
     * @summary Get all the facet attributes for a list of users.
     * @param {UsersApiGetAllFacetAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getAllFacetAttributes(requestParameters: UsersApiGetAllFacetAttributesRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getAllFacetAttributes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of personas and their scores for a given user. Personas are sorted by their persona score, in descending order.  You can also specify the minimum persona score threshold that a user must meet to be included in the response. Defaults to hyperplane\'s suggested threshold to determine if the user belongs to the persona.
     * @summary List personas associated with a user.
     * @param {UsersApiListUserPersonasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public listUserPersonas(requestParameters: UsersApiListUserPersonasRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserPersonas(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
