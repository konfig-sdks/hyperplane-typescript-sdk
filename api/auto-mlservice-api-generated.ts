/* tslint:disable */
/* eslint-disable */
/*
Hyperplane API Gateway

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ModelsAutoMLBatchScoresCreateResponse } from '../models';
// @ts-ignore
import { ModelsAutoMLLookalikeCreateRequest } from '../models';
// @ts-ignore
import { ModelsAutoMLLookalikeCreateResponse } from '../models';
// @ts-ignore
import { ModelsAutoMLRunGetIdResponse } from '../models';
// @ts-ignore
import { ModelsAutoMLRunUsersGetRequest } from '../models';
// @ts-ignore
import { ModelsAutoMLRunUsersGetResponse } from '../models';
// @ts-ignore
import { ModelsAutoMLRunsGetResponse } from '../models';
// @ts-ignore
import { ModelsAutoMLUsersGetResponse } from '../models';
// @ts-ignore
import { ModelsLookalikeLabel } from '../models';
// @ts-ignore
import { ModelsTagCategoricalAttributeFilter } from '../models';
// @ts-ignore
import { ModelsUserMetadata } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AutoMLServiceApi - axios parameter creator
 * @export
 */
export const AutoMLServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create an AutoML lookalike request
         * @param {ModelsAutoMLLookalikeCreateRequest} modelsAutoMLLookalikeCreateRequest Lookalike Request Body
         * @param {string} [modelVersion] Model Version
         * @param {string} [moduleId] Module ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLookalikeRequest: async (modelsAutoMLLookalikeCreateRequest: ModelsAutoMLLookalikeCreateRequest, modelVersion?: string, moduleId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelsAutoMLLookalikeCreateRequest' is not null or undefined
            assertParamExists('createLookalikeRequest', 'modelsAutoMLLookalikeCreateRequest', modelsAutoMLLookalikeCreateRequest)
            const localVarPath = `/automl/lookalike`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PASETO required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "pASETO", configuration })
            if (modelVersion !== undefined) {
                localVarQueryParameter['model_version'] = modelVersion;
            }

            if (moduleId != null) {
                localVarHeaderParameter['module-id'] = String(moduleId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: modelsAutoMLLookalikeCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automl/lookalike',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(modelsAutoMLLookalikeCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all AutoML runs in a specified module
         * @param {string} [moduleId] Module ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRuns: async (moduleId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/automl/runs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PASETO required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "pASETO", configuration })
            if (moduleId != null) {
                localVarHeaderParameter['module-id'] = String(moduleId);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automl/runs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get available users for training an AutoML run in a specified module
         * @param {string} [moduleId] Module ID
         * @param {number} [pageNumber] Page number, starting at 1
         * @param {number} [pageSize] Number of users scored in run per page. Between 1 and 10000. Defaults to 500
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableUsers: async (moduleId?: string, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/automl/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PASETO required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "pASETO", configuration })
            if (pageNumber !== undefined) {
                localVarQueryParameter['page_number'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (moduleId != null) {
                localVarHeaderParameter['module-id'] = String(moduleId);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automl/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get status of a specified AutoML run
         * @param {string} runId Run ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunStatus: async (runId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'runId' is not null or undefined
            assertParamExists('getRunStatus', 'runId', runId)
            const localVarPath = `/automl/runs/{run_id}/status`
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId !== undefined ? runId : `-run_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PASETO required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "pASETO", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automl/runs/{run_id}/status',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get status of the batch scores request for an AutoML run
         * @param {string} runId Run ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunStatusBatchScores: async (runId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'runId' is not null or undefined
            assertParamExists('getRunStatusBatchScores', 'runId', runId)
            const localVarPath = `/automl/runs/{run_id}/status_batch_scores`
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId !== undefined ? runId : `-run_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PASETO required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "pASETO", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automl/runs/{run_id}/status_batch_scores',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get run summary for a specified AutoML run
         * @param {string} runId Run ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunSummary: async (runId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'runId' is not null or undefined
            assertParamExists('getRunSummary', 'runId', runId)
            const localVarPath = `/automl/runs/{run_id}`
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId !== undefined ? runId : `-run_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PASETO required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "pASETO", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automl/runs/{run_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get top users from a specified AutoML run excluding training users
         * @param {string} runId Run ID
         * @param {ModelsAutoMLRunUsersGetRequest} modelsAutoMLRunUsersGetRequest Request Options
         * @param {number} [pageNumber] Page number, starting at 1
         * @param {number} [pageSize] Number of users scored in run per page. Between 1 and 10000. Defaults to 500
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopUsersExcludingTraining: async (runId: string, modelsAutoMLRunUsersGetRequest: ModelsAutoMLRunUsersGetRequest, pageNumber?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'runId' is not null or undefined
            assertParamExists('getTopUsersExcludingTraining', 'runId', runId)
            // verify required parameter 'modelsAutoMLRunUsersGetRequest' is not null or undefined
            assertParamExists('getTopUsersExcludingTraining', 'modelsAutoMLRunUsersGetRequest', modelsAutoMLRunUsersGetRequest)
            const localVarPath = `/automl/runs/{run_id}/users`
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId !== undefined ? runId : `-run_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PASETO required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "pASETO", configuration })
            if (pageNumber !== undefined) {
                localVarQueryParameter['page_number'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: modelsAutoMLRunUsersGetRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automl/runs/{run_id}/users',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(modelsAutoMLRunUsersGetRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rerun inference on latest user snapshots to update scores
         * @param {string} runId Run ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rerunInference: async (runId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'runId' is not null or undefined
            assertParamExists('rerunInference', 'runId', runId)
            const localVarPath = `/automl/runs/{run_id}/rescore`
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId !== undefined ? runId : `-run_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PASETO required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "pASETO", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automl/runs/{run_id}/rescore',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rerun the inference and store the updated scores in the output connection of the module
         * @param {string} runId Run ID
         * @param {string} [moduleId] Module ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rerunInferenceScores: async (runId: string, moduleId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'runId' is not null or undefined
            assertParamExists('rerunInferenceScores', 'runId', runId)
            const localVarPath = `/automl/runs/{run_id}/generate_batch_scores`
                .replace(`{${"run_id"}}`, encodeURIComponent(String(runId !== undefined ? runId : `-run_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PASETO required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "pASETO", configuration })
            if (moduleId != null) {
                localVarHeaderParameter['module-id'] = String(moduleId);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/automl/runs/{run_id}/generate_batch_scores',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AutoMLServiceApi - functional programming interface
 * @export
 */
export const AutoMLServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AutoMLServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create an AutoML lookalike request
         * @param {AutoMLServiceApiCreateLookalikeRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLookalikeRequest(requestParameters: AutoMLServiceApiCreateLookalikeRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAutoMLLookalikeCreateResponse>> {
            const modelsAutoMLLookalikeCreateRequest: ModelsAutoMLLookalikeCreateRequest = {
                engagement_type: requestParameters.engagement_type,
                negative_label_users: requestParameters.negative_label_users,
                positive_label_users: requestParameters.positive_label_users,
                run_description: requestParameters.run_description
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLookalikeRequest(modelsAutoMLLookalikeCreateRequest, requestParameters.modelVersion, requestParameters.moduleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all AutoML runs in a specified module
         * @param {AutoMLServiceApiGetAllRunsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRuns(requestParameters: AutoMLServiceApiGetAllRunsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAutoMLRunsGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRuns(requestParameters.moduleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get available users for training an AutoML run in a specified module
         * @param {AutoMLServiceApiGetAvailableUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableUsers(requestParameters: AutoMLServiceApiGetAvailableUsersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAutoMLUsersGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableUsers(requestParameters.moduleId, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get status of a specified AutoML run
         * @param {AutoMLServiceApiGetRunStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRunStatus(requestParameters: AutoMLServiceApiGetRunStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRunStatus(requestParameters.runId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get status of the batch scores request for an AutoML run
         * @param {AutoMLServiceApiGetRunStatusBatchScoresRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRunStatusBatchScores(requestParameters: AutoMLServiceApiGetRunStatusBatchScoresRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRunStatusBatchScores(requestParameters.runId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get run summary for a specified AutoML run
         * @param {AutoMLServiceApiGetRunSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRunSummary(requestParameters: AutoMLServiceApiGetRunSummaryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAutoMLRunGetIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRunSummary(requestParameters.runId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get top users from a specified AutoML run excluding training users
         * @param {AutoMLServiceApiGetTopUsersExcludingTrainingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopUsersExcludingTraining(requestParameters: AutoMLServiceApiGetTopUsersExcludingTrainingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAutoMLRunUsersGetResponse>> {
            const modelsAutoMLRunUsersGetRequest: ModelsAutoMLRunUsersGetRequest = {
                allow_users: requestParameters.allow_users,
                block_users: requestParameters.block_users,
                tag_filters: requestParameters.tag_filters
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopUsersExcludingTraining(requestParameters.runId, modelsAutoMLRunUsersGetRequest, requestParameters.pageNumber, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Rerun inference on latest user snapshots to update scores
         * @param {AutoMLServiceApiRerunInferenceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rerunInference(requestParameters: AutoMLServiceApiRerunInferenceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAutoMLLookalikeCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rerunInference(requestParameters.runId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Rerun the inference and store the updated scores in the output connection of the module
         * @param {AutoMLServiceApiRerunInferenceScoresRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rerunInferenceScores(requestParameters: AutoMLServiceApiRerunInferenceScoresRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAutoMLBatchScoresCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rerunInferenceScores(requestParameters.runId, requestParameters.moduleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AutoMLServiceApi - factory interface
 * @export
 */
export const AutoMLServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AutoMLServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Create an AutoML lookalike request
         * @param {AutoMLServiceApiCreateLookalikeRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLookalikeRequest(requestParameters: AutoMLServiceApiCreateLookalikeRequestRequest, options?: AxiosRequestConfig): AxiosPromise<ModelsAutoMLLookalikeCreateResponse> {
            return localVarFp.createLookalikeRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all AutoML runs in a specified module
         * @param {AutoMLServiceApiGetAllRunsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRuns(requestParameters: AutoMLServiceApiGetAllRunsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ModelsAutoMLRunsGetResponse> {
            return localVarFp.getAllRuns(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get available users for training an AutoML run in a specified module
         * @param {AutoMLServiceApiGetAvailableUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableUsers(requestParameters: AutoMLServiceApiGetAvailableUsersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ModelsAutoMLUsersGetResponse> {
            return localVarFp.getAvailableUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get status of a specified AutoML run
         * @param {AutoMLServiceApiGetRunStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunStatus(requestParameters: AutoMLServiceApiGetRunStatusRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getRunStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get status of the batch scores request for an AutoML run
         * @param {AutoMLServiceApiGetRunStatusBatchScoresRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunStatusBatchScores(requestParameters: AutoMLServiceApiGetRunStatusBatchScoresRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getRunStatusBatchScores(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get run summary for a specified AutoML run
         * @param {AutoMLServiceApiGetRunSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRunSummary(requestParameters: AutoMLServiceApiGetRunSummaryRequest, options?: AxiosRequestConfig): AxiosPromise<ModelsAutoMLRunGetIdResponse> {
            return localVarFp.getRunSummary(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get top users from a specified AutoML run excluding training users
         * @param {AutoMLServiceApiGetTopUsersExcludingTrainingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopUsersExcludingTraining(requestParameters: AutoMLServiceApiGetTopUsersExcludingTrainingRequest, options?: AxiosRequestConfig): AxiosPromise<ModelsAutoMLRunUsersGetResponse> {
            return localVarFp.getTopUsersExcludingTraining(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rerun inference on latest user snapshots to update scores
         * @param {AutoMLServiceApiRerunInferenceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rerunInference(requestParameters: AutoMLServiceApiRerunInferenceRequest, options?: AxiosRequestConfig): AxiosPromise<ModelsAutoMLLookalikeCreateResponse> {
            return localVarFp.rerunInference(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rerun the inference and store the updated scores in the output connection of the module
         * @param {AutoMLServiceApiRerunInferenceScoresRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rerunInferenceScores(requestParameters: AutoMLServiceApiRerunInferenceScoresRequest, options?: AxiosRequestConfig): AxiosPromise<ModelsAutoMLBatchScoresCreateResponse> {
            return localVarFp.rerunInferenceScores(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createLookalikeRequest operation in AutoMLServiceApi.
 * @export
 * @interface AutoMLServiceApiCreateLookalikeRequestRequest
 */
export type AutoMLServiceApiCreateLookalikeRequestRequest = {
    
    /**
    * Model Version
    * @type {string}
    * @memberof AutoMLServiceApiCreateLookalikeRequest
    */
    readonly modelVersion?: string
    
    /**
    * Module ID
    * @type {string}
    * @memberof AutoMLServiceApiCreateLookalikeRequest
    */
    readonly moduleId?: string
    
} & ModelsAutoMLLookalikeCreateRequest

/**
 * Request parameters for getAllRuns operation in AutoMLServiceApi.
 * @export
 * @interface AutoMLServiceApiGetAllRunsRequest
 */
export type AutoMLServiceApiGetAllRunsRequest = {
    
    /**
    * Module ID
    * @type {string}
    * @memberof AutoMLServiceApiGetAllRuns
    */
    readonly moduleId?: string
    
}

/**
 * Request parameters for getAvailableUsers operation in AutoMLServiceApi.
 * @export
 * @interface AutoMLServiceApiGetAvailableUsersRequest
 */
export type AutoMLServiceApiGetAvailableUsersRequest = {
    
    /**
    * Module ID
    * @type {string}
    * @memberof AutoMLServiceApiGetAvailableUsers
    */
    readonly moduleId?: string
    
    /**
    * Page number, starting at 1
    * @type {number}
    * @memberof AutoMLServiceApiGetAvailableUsers
    */
    readonly pageNumber?: number
    
    /**
    * Number of users scored in run per page. Between 1 and 10000. Defaults to 500
    * @type {number}
    * @memberof AutoMLServiceApiGetAvailableUsers
    */
    readonly pageSize?: number
    
}

/**
 * Request parameters for getRunStatus operation in AutoMLServiceApi.
 * @export
 * @interface AutoMLServiceApiGetRunStatusRequest
 */
export type AutoMLServiceApiGetRunStatusRequest = {
    
    /**
    * Run ID
    * @type {string}
    * @memberof AutoMLServiceApiGetRunStatus
    */
    readonly runId: string
    
}

/**
 * Request parameters for getRunStatusBatchScores operation in AutoMLServiceApi.
 * @export
 * @interface AutoMLServiceApiGetRunStatusBatchScoresRequest
 */
export type AutoMLServiceApiGetRunStatusBatchScoresRequest = {
    
    /**
    * Run ID
    * @type {string}
    * @memberof AutoMLServiceApiGetRunStatusBatchScores
    */
    readonly runId: string
    
}

/**
 * Request parameters for getRunSummary operation in AutoMLServiceApi.
 * @export
 * @interface AutoMLServiceApiGetRunSummaryRequest
 */
export type AutoMLServiceApiGetRunSummaryRequest = {
    
    /**
    * Run ID
    * @type {string}
    * @memberof AutoMLServiceApiGetRunSummary
    */
    readonly runId: string
    
}

/**
 * Request parameters for getTopUsersExcludingTraining operation in AutoMLServiceApi.
 * @export
 * @interface AutoMLServiceApiGetTopUsersExcludingTrainingRequest
 */
export type AutoMLServiceApiGetTopUsersExcludingTrainingRequest = {
    
    /**
    * Run ID
    * @type {string}
    * @memberof AutoMLServiceApiGetTopUsersExcludingTraining
    */
    readonly runId: string
    
    /**
    * Page number, starting at 1
    * @type {number}
    * @memberof AutoMLServiceApiGetTopUsersExcludingTraining
    */
    readonly pageNumber?: number
    
    /**
    * Number of users scored in run per page. Between 1 and 10000. Defaults to 500
    * @type {number}
    * @memberof AutoMLServiceApiGetTopUsersExcludingTraining
    */
    readonly pageSize?: number
    
} & ModelsAutoMLRunUsersGetRequest

/**
 * Request parameters for rerunInference operation in AutoMLServiceApi.
 * @export
 * @interface AutoMLServiceApiRerunInferenceRequest
 */
export type AutoMLServiceApiRerunInferenceRequest = {
    
    /**
    * Run ID
    * @type {string}
    * @memberof AutoMLServiceApiRerunInference
    */
    readonly runId: string
    
}

/**
 * Request parameters for rerunInferenceScores operation in AutoMLServiceApi.
 * @export
 * @interface AutoMLServiceApiRerunInferenceScoresRequest
 */
export type AutoMLServiceApiRerunInferenceScoresRequest = {
    
    /**
    * Run ID
    * @type {string}
    * @memberof AutoMLServiceApiRerunInferenceScores
    */
    readonly runId: string
    
    /**
    * Module ID
    * @type {string}
    * @memberof AutoMLServiceApiRerunInferenceScores
    */
    readonly moduleId?: string
    
}

/**
 * AutoMLServiceApiGenerated - object-oriented interface
 * @export
 * @class AutoMLServiceApiGenerated
 * @extends {BaseAPI}
 */
export class AutoMLServiceApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create an AutoML lookalike request
     * @param {AutoMLServiceApiCreateLookalikeRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoMLServiceApiGenerated
     */
    public createLookalikeRequest(requestParameters: AutoMLServiceApiCreateLookalikeRequestRequest, options?: AxiosRequestConfig) {
        return AutoMLServiceApiFp(this.configuration).createLookalikeRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all AutoML runs in a specified module
     * @param {AutoMLServiceApiGetAllRunsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoMLServiceApiGenerated
     */
    public getAllRuns(requestParameters: AutoMLServiceApiGetAllRunsRequest = {}, options?: AxiosRequestConfig) {
        return AutoMLServiceApiFp(this.configuration).getAllRuns(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get available users for training an AutoML run in a specified module
     * @param {AutoMLServiceApiGetAvailableUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoMLServiceApiGenerated
     */
    public getAvailableUsers(requestParameters: AutoMLServiceApiGetAvailableUsersRequest = {}, options?: AxiosRequestConfig) {
        return AutoMLServiceApiFp(this.configuration).getAvailableUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get status of a specified AutoML run
     * @param {AutoMLServiceApiGetRunStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoMLServiceApiGenerated
     */
    public getRunStatus(requestParameters: AutoMLServiceApiGetRunStatusRequest, options?: AxiosRequestConfig) {
        return AutoMLServiceApiFp(this.configuration).getRunStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get status of the batch scores request for an AutoML run
     * @param {AutoMLServiceApiGetRunStatusBatchScoresRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoMLServiceApiGenerated
     */
    public getRunStatusBatchScores(requestParameters: AutoMLServiceApiGetRunStatusBatchScoresRequest, options?: AxiosRequestConfig) {
        return AutoMLServiceApiFp(this.configuration).getRunStatusBatchScores(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get run summary for a specified AutoML run
     * @param {AutoMLServiceApiGetRunSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoMLServiceApiGenerated
     */
    public getRunSummary(requestParameters: AutoMLServiceApiGetRunSummaryRequest, options?: AxiosRequestConfig) {
        return AutoMLServiceApiFp(this.configuration).getRunSummary(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get top users from a specified AutoML run excluding training users
     * @param {AutoMLServiceApiGetTopUsersExcludingTrainingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoMLServiceApiGenerated
     */
    public getTopUsersExcludingTraining(requestParameters: AutoMLServiceApiGetTopUsersExcludingTrainingRequest, options?: AxiosRequestConfig) {
        return AutoMLServiceApiFp(this.configuration).getTopUsersExcludingTraining(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rerun inference on latest user snapshots to update scores
     * @param {AutoMLServiceApiRerunInferenceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoMLServiceApiGenerated
     */
    public rerunInference(requestParameters: AutoMLServiceApiRerunInferenceRequest, options?: AxiosRequestConfig) {
        return AutoMLServiceApiFp(this.configuration).rerunInference(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rerun the inference and store the updated scores in the output connection of the module
     * @param {AutoMLServiceApiRerunInferenceScoresRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoMLServiceApiGenerated
     */
    public rerunInferenceScores(requestParameters: AutoMLServiceApiRerunInferenceScoresRequest, options?: AxiosRequestConfig) {
        return AutoMLServiceApiFp(this.configuration).rerunInferenceScores(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
